Factory method
У нас есть разные объекты, обладающие одним и тем же сценарием(методами), но поведение разное(команды внутри метода) по разному.
Можно написать абстрактный(или не абстрактный) общий класс для такого поведения. А дети этого класса будут возвращать конкретные объекты обладающие одинаковым поведением.

https://refactoring.guru/ru/design-patterns/factory-metho


Builder (строитель)
Вместо создания сложного объекта, с помощью множества параметров или создания большого количества классов, строитель предлагает использовать класс с методами для создания отдельных элементов объекта.
Например: класс HouseBuilder будет содержать методы CreateStone(), CreateDoor(), CreatePool(). Все подобные классы реализуют интерфейс IHouseBuilder.

Клиент может собирать автомобили, работая со строителем напрямую. Но, с другой стороны, он может поручить это дело директору. Это объект, который знает, какие шаги строителя нужно вызвать, чтобы получить несколько самых популярных конфигураций  домов.
Пример: класс HouseDirector. CreateDefaultHouse(builder) 
{
builder.CreateStone(4) ;
builder.CreateDoor(1) ;
}
CreateRichHouse(builder)
{
builder.CreateStone(10) ;
builder.CreateDoor(10) ;
}

https://refactoring.guru/ru/design-patterns/builder


--
Мост
Использует агрегацию. Добавление в переменную объекта.

https://refactoring.guru/ru/design-patterns/bridge
